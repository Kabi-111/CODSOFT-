import math
PLAYER_X = "X"
PLAYER_O = "O"
EMPTY = " "

class TicTacToe:
    def __init__(self):
        self.board = [[EMPTY for _ in range(3)] for _ in range(3)]

    def print_board(self):
        for row in self.board:
            print("|".join(row))
            print("-" * 5)

    def is_winner(self, player):
        
        for row in self.board:
            if all(cell == player for cell in row):
                return True
        for col in range(3):
            if all(self.board[row][col] == player for row in range(3)):
                return True
        if all(self.board[i][i] == player for i in range(3)) or \
           all(self.board[i][2 - i] == player for i in range(3)):
            return True
        return False

    def is_full(self):
        return all(cell != EMPTY for row in self.board for cell in row)

    def get_empty_positions(self):
        return [(i, j) for i in range(3) for j in range(3) if self.board[i][j] == EMPTY]

    def minimax(self, depth, is_maximizing):
        if self.is_winner(PLAYER_X):
            return -1
        if self.is_winner(PLAYER_O):
            return 1
        if self.is_full():
            return 0

        if is_maximizing:
            best_score = -math.inf
            for (i, j) in self.get_empty_positions():
                self.board[i][j] = PLAYER_O
                score = self.minimax(depth + 1, False)
                self.board[i][j] = EMPTY
                best_score = max(score, best_score)
            return best_score
        else:
            best_score = math.inf
            for (i, j) in self.get_empty_positions():
                self.board[i][j] = PLAYER_X
                score = self.minimax(depth + 1, True)
                self.board[i][j] = EMPTY
                best_score = min(score, best_score)
            return best_score

    def best_move(self):
        best_score = -math.inf
        move = None
        for (i, j) in self.get_empty_positions():
            self.board[i][j] = PLAYER_O
            score = self.minimax(0, False)
            self.board[i][j] = EMPTY
            if score > best_score:
                best_score = score
                move = (i, j)
        return move

    def play(self):
        while True:
            self.print_board()
            if self.is_winner(PLAYER_X):
                print("Player X wins!")
                break
            if self.is_full():
                print("It's a draw!")
                break

            
            while True:
                try:
                    x_move = int(input("Player X, enter your move (row and column): ")) - 1
                    y_move = int(input("Player X, enter your move (row and column): ")) - 1
                    if self.board[x_move][y_move] == EMPTY:
                        self.board[x_move][y_move] = PLAYER_X
                        break
                    else:
                        print("This position is already taken. Try again.")
                except (ValueError, IndexError):
                    print("Invalid input. Please enter numbers from 1 to 3.")

            if self.is_winner(PLAYER_X):
                self.print_board()
                print("Player X wins!")
                break
            if self.is_full():
                self.print_board()
                print("It's a draw!")
                break

            
            print("Player O is thinking...")
            move = self.best_move()
            if move:
                self.board[move[0]][move[1]] = PLAYER_O

            if self.is_winner(PLAYER_O):
                self.print_board()
                print("Player O wins!")
                break
            if self.is_full():
                self.print_board()
                print("It's a draw!")
                break

if __name__ == "__main__":
    game = TicTacToe()
    game.play()
